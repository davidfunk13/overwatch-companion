// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type MutateItemPayload interface {
	IsMutateItemPayload()
}

type Battletag struct {
	ID         int        `json:"id"`
	UserID     int        `json:"userId"`
	Battletag  string     `json:"battletag"`
	Platform   *Platform  `json:"platform"`
	Identifier *int       `json:"identifier"`
	Sessions   []*Session `json:"sessions"`
}

type InputBattletag struct {
	UserID     int      `json:"userId"`
	Battletag  string   `json:"battletag"`
	Platform   Platform `json:"platform"`
	Identifier *int     `json:"identifier"`
}

type InputSession struct {
	UserID    int `json:"userId"`
	SessionID int `json:"sessionId"`
}

type MutateItemPayloadFailure struct {
	ID      int    `json:"id"`
	Success bool   `json:"success"`
	Error   string `json:"error"`
}

func (MutateItemPayloadFailure) IsMutateItemPayload() {}

type MutateItemPayloadSuccess struct {
	ID      int    `json:"id"`
	Success bool   `json:"success"`
	Message string `json:"message"`
}

func (MutateItemPayloadSuccess) IsMutateItemPayload() {}

type Session struct {
	ID        int `json:"id"`
	UserID    int `json:"userId"`
	SessionID int `json:"sessionId"`
}

type Platform string

const (
	PlatformPc          Platform = "PC"
	PlatformNintendo    Platform = "NINTENDO"
	PlatformXbox        Platform = "XBOX"
	PlatformPlaystation Platform = "PLAYSTATION"
)

var AllPlatform = []Platform{
	PlatformPc,
	PlatformNintendo,
	PlatformXbox,
	PlatformPlaystation,
}

func (e Platform) IsValid() bool {
	switch e {
	case PlatformPc, PlatformNintendo, PlatformXbox, PlatformPlaystation:
		return true
	}
	return false
}

func (e Platform) String() string {
	return string(e)
}

func (e *Platform) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = Platform(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid Platform", str)
	}
	return nil
}

func (e Platform) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
