enum Platform{
  PC 
  NINTENDOSWITCH
  XBOX
  PLAYSTATION
}

enum Role{
  TANK
  DAMAGE
  SUPPORT
}

enum MatchOutcome{
  LOSS
  WIN 
  DRAW
}

enum Location{
  BUSAN
  ILIOS
  LIJIANGTOWER
  NEPAL
  OASIS
  HANAMURA
  TEMPLEOFANUBIS
  VOLSKAYAINDUSTRIES
  DORADO
  HAVANA
  JUNKERTOWN
  RIALTO
  ROUTE66
  WATCHPOINTGIBRALTAR
  BLIZZARDWORLD
  EICHENWALDE
  HOLLYWOOD
  KINGSROW
  NUMBANI
}

# Battletag schemas
type Battletag {
  id: Int!
  userId: Int!
  name: String!
  urlName: String!
  blizzId: Int!
  level: Int!
  playerLevel: Int!
  platform: Platform!
  isPublic: Boolean,
  portrait: String!,
}

input InputBattletag {
  userId: Int!
  name: String!
  urlName: String!
  blizzId: Int!
  level: Int!
  playerLevel: Int!
  platform: Platform!
  isPublic: Boolean!
  portrait: String!
}

type BlizzBattletag {
  name: String!
  urlName: String!
  blizzId: Int!
  level: Int!
  playerLevel: Int!
  platform: Platform!
  isPublic: Boolean!
  portrait: String!
}

interface MutateItemPayload {
  id: Int
  success: Boolean!
}

type MutateItemPayloadSuccess implements MutateItemPayload {
  id: Int!
  success: Boolean!
  message: String!
}

type MutateItemPayloadFailure implements MutateItemPayload {
  id: Int!
  success: Boolean!
  error: String!
}

# Session schema
type Session {
  id: Int!
  userId: Int!
  battletagId: Int!
  starting_sr_tank: Int!
  sr_tank: Int!
  starting_sr_damage: Int!
  sr_damage: Int!
  starting_sr_support: Int!
  sr_support: Int!
}

input InputSession {
  userId: Int!
  battletagId: Int!
  starting_sr_tank: Int
  starting_sr_damage: Int
  starting_sr_support: Int
}

input InputGetSessions {
  userId: Int!
  battletagId: Int!
}

# Game schema
type Game {
  id: Int!
  userId: Int!
  battletagId: Int!
  sessionId: Int!
  location: Location!
  role: Role!
  sr_in: Int!
  sr_out: Int!
  match_outcome: MatchOutcome!
}

input InputGame {
  userId: Int!
  battletagId: Int!
  sessionId: Int!
  location: Location!
  role: Role!
  sr_out: Int!
  match_outcome: MatchOutcome!
}

input InputGetGames {
  userId: Int!
  battletagId: Int!
  sessionId: Int!
  role: Role
}

# Queries 
type Query {
  battletags(input: Int!): [Battletag!]!
  sessions(input: InputGetSessions): [Session!]!
  games(input: InputGetGames): [Game!]!
}

# Mutations
type Mutation {
  createBattletag(input: InputBattletag!): Battletag!
  deleteBattletag(input: Int!): MutateItemPayload!
  createSession(input: InputSession!): Session!
  deleteSession(input: Int!): MutateItemPayload!
  createGame(input: InputGame!): Game!
  deleteGame(input: Int!): MutateItemPayload!
}