enum Platform {
  PC
  NINTENDOSWITCH
  XBOX
  PLAYSTATION
}

enum Role {
  TANK
  DAMAGE
  SUPPORT
}

enum MatchOutcome {
  LOSS
  WIN
  DRAW
}

enum Location {
  BUSAN
  ILIOS
  LIJIANGTOWER
  NEPAL
  OASIS
  HANAMURA
  TEMPLEOFANUBIS
  VOLSKAYAINDUSTRIES
  DORADO
  HAVANA
  JUNKERTOWN
  RIALTO
  ROUTE66
  WATCHPOINTGIBRALTAR
  BLIZZARDWORLD
  EICHENWALDE
  HOLLYWOOD
  KINGSROW
  NUMBANI
}

# Utilities
union OptionalDataPayload = Battletag | Session | Game

interface QueryPayload {
  success: Boolean!
}

type GetAllBattletagsPayloadSuccess implements QueryPayload {
  success: Boolean!
  message: String!
  data: [Battletag!]!
}

type GetAllBattletagsPayloadFailure implements QueryPayload {
  success: Boolean!
  error: String!
  data: [Battletag]!
}

type GetAllSessionsPayloadSuccess implements QueryPayload {
  success: Boolean!
  message: String!
  data: [Session!]!
}

type GetAllSessionsPayloadFailure implements QueryPayload {
  success: Boolean!
  error: String!
  data: [Session]!
}

type GetAllGamesPayloadSuccess implements QueryPayload {
  success: Boolean!
  message: String!
  data: [Game!]!
}

type GetAllGamesPayloadFailure implements QueryPayload {
  success: Boolean!
  error: String!
  data: [Game]!
}

type GetOneItemPayloadSuccess implements QueryPayload {
  success: Boolean!
  message: String!
  data: OptionalDataPayload
}

type GetOneItemPayloadFailure implements QueryPayload {
  success: Boolean!
  error: String!
  message: String
}

interface MutateItemPayload {
  id: Int
  success: Boolean!
}

type MutateItemPayloadSuccess implements MutateItemPayload {
  id: Int!
  success: Boolean!
  message: String!
  data: OptionalDataPayload
}

type MutateItemPayloadFailure implements MutateItemPayload {
  id: Int!
  success: Boolean!
  error: String!
  data: String
}

# Battletag schemas
type Battletag {
  id: Int!
  userId: String!
  name: String!
  urlName: String!
  blizzId: Int!
  level: Int!
  playerLevel: Int!
  platform: Platform!
  isPublic: Boolean
  portrait: String!
}

input InputBattletag {
  userId: String!
  name: String!
  urlName: String!
  blizzId: Int!
  level: Int!
  playerLevel: Int!
  platform: Platform!
  isPublic: Boolean!
  portrait: String!
}

type BlizzBattletag {
  name: String!
  urlName: String!
  blizzId: Int!
  level: Int!
  playerLevel: Int!
  platform: Platform!
  isPublic: Boolean!
  portrait: String!
}

# Session schema
type Session {
  id: Int!
  userId: String!
  battletagId: Int!
  starting_sr_tank: Int!
  sr_tank: Int!
  starting_sr_damage: Int!
  sr_damage: Int!
  starting_sr_support: Int!
  sr_support: Int!
}

input InputSession {
  userId: String!
  battletagId: Int!
  starting_sr_tank: Int
  starting_sr_damage: Int
  starting_sr_support: Int
}

input InputGetSessions {
  userId: String!
  battletagId: Int!
}

input InputGetOneSessionByIDAndBattletagID {
  id: Int!
  battletagId: Int!
}

input InputUpdateSessionStartingSR {
  id: Int!
  userId: String!
  battletagId: Int!
  role: Role!
  starting_sr: Int!
}

# Game schema
type Game {
  id: Int!
  userId: String!
  battletagId: Int!
  sessionId: Int!
  location: Location!
  role: Role!
  sr_in: Int!
  sr_out: Int!
  match_outcome: MatchOutcome!
}

input InputGame {
  userId: String!
  battletagId: Int!
  sessionId: Int!
  location: Location!
  role: Role!
  sr_out: Int!
  match_outcome: MatchOutcome!
}

input InputGetGame {
  id: Int!
  userId: String!
  battletagId: Int!
  sessionId: Int!
  role: Role
}

input InputGetGames {
  userId: String!
  battletagId: Int!
  sessionId: Int!
  role: Role
}

input InputGetOneBattletag {
  userId: String!
  battletagId: Int!
}

# Queries
type Query {
  getAllBattletags(input: String!): QueryPayload!
  getOneBattletag(input: InputGetOneBattletag): QueryPayload!
  getAllSessions(input: InputGetSessions): QueryPayload!
  getOneSession(input: InputGetOneSessionByIDAndBattletagID): QueryPayload!
  getOneGame(input: InputGetGame): QueryPayload!
  getAllGames(input: InputGetGames): QueryPayload!
}

# Mutations
type Mutation {
  createBattletag(input: InputBattletag!): MutateItemPayload!
  deleteBattletag(input: Int!): MutateItemPayload!
  createSession(input: InputSession!): MutateItemPayload!
  updateSessionStartingSR(
    input: InputUpdateSessionStartingSR!
  ): MutateItemPayload!
  deleteSession(input: Int!): MutateItemPayload!
  createGame(input: InputGame!): MutateItemPayload!
  deleteGame(input: Int!): MutateItemPayload!
}
